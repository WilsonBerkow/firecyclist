Elm.BasicUtil = Elm.BasicUtil || {};
Elm.BasicUtil.make = function (_elm) {
   "use strict";
   _elm.BasicUtil = _elm.BasicUtil || {};
   if (_elm.BasicUtil.values)
   return _elm.BasicUtil.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "BasicUtil",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm);
   var any = function (p) {
      return A2($List.foldl,
      F2(function (elem,acc) {
         return acc || p(elem);
      }),
      false);
   };
   var fn_map2 = F4(function (f,
   g,
   h,
   x) {
      return A2(f,g(x),h(x));
   });
   var fn_map = F3(function (f,
   g,
   x) {
      return f(g(x));
   });
   var signnum = function (x) {
      return _U.cmp(x,
      0) > 0 ? 1 : _U.eq(x,
      0) ? 0 : _U.cmp(x,
      0) < 0 ? -1 : _U.badIf($moduleName,
      "between lines 34 and 36");
   };
   var deepGrey = A3($Color.rgb,
   50,
   50,
   50);
   var replicate = F2(function (n,
   x) {
      return _U.eq(n,
      0) ? _L.fromArray([]) : A2($List._op["::"],
      x,
      A2(replicate,n - 1,x));
   });
   var mtail = function (l) {
      return function () {
         switch (l.ctor)
         {case "::":
            return $Maybe.Just(l._1);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 27 and 28");
      }();
   };
   var mhead = function (l) {
      return function () {
         switch (l.ctor)
         {case "::":
            return $Maybe.Just(l._0);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 25 and 26");
      }();
   };
   var in_range = F3(function (x1,
   x2,
   v) {
      return _U.cmp(x1,
      v) < 1 && _U.cmp(v,
      x2) < 1 || _U.cmp(x2,
      v) < 1 && _U.cmp(v,x1) < 1;
   });
   var isJust = function (ma) {
      return function () {
         switch (ma.ctor)
         {case "Just": return true;
            case "Nothing": return false;}
         _U.badCase($moduleName,
         "between lines 19 and 21");
      }();
   };
   var maybeOr = F2(function (mx,
   my) {
      return function () {
         var _v8 = {ctor: "_Tuple2"
                   ,_0: mx
                   ,_1: my};
         switch (_v8.ctor)
         {case "_Tuple2":
            switch (_v8._0.ctor)
              {case "Just":
                 return $Maybe.Just(_v8._0._0);
                 case "Nothing":
                 switch (_v8._1.ctor)
                   {case "Just":
                      return $Maybe.Just(_v8._1._0);
                      case "Nothing":
                      return $Maybe.Nothing;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 13 and 17");
      }();
   });
   var constant = F2(function (x,
   y) {
      return y;
   });
   var mod = F2(function (x,y) {
      return _U.cmp(x,
      0) < 0 ? y + x : _U.cmp(x,
      y) > -1 ? x - y : x;
   });
   _elm.BasicUtil.values = {_op: _op
                           ,mod: mod
                           ,constant: constant
                           ,maybeOr: maybeOr
                           ,isJust: isJust
                           ,in_range: in_range
                           ,mhead: mhead
                           ,mtail: mtail
                           ,replicate: replicate
                           ,deepGrey: deepGrey
                           ,signnum: signnum
                           ,fn_map: fn_map
                           ,fn_map2: fn_map2
                           ,any: any};
   return _elm.BasicUtil.values;
};