Elm.Player = Elm.Player || {};
Elm.Player.make = function (_elm) {
   "use strict";
   _elm.Player = _elm.Player || {};
   if (_elm.Player.values)
   return _elm.Player.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Player",
   $BasicUtil = Elm.BasicUtil.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $HasPosition = Elm.HasPosition.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Platfm = Elm.Platfm.make(_elm);
   var configPlayer = {_: {}
                      ,radius: 10};
   var stepPlayer = function () {
      var player_grav = 0.2;
      var platfm_bounciness = 0.75;
      var vel_from_slope = function (m) {
         return $HasPosition.vect_rise(platfm_bounciness)($HasPosition.vect_rise($Platfm.configPlatfm.fall_rate)($HasPosition.vscale(3)({_: {}
                                                                                                                                        ,x: $BasicUtil.signnum(m)
                                                                                                                                        ,y: $Basics.abs(m)})));
      };
      var intersects = F2(function (player,
      plat) {
         return A3($BasicUtil.in_range,
         plat.start.x,
         plat.end.x,
         player.pos.x) && (A3($BasicUtil.in_range,
         plat.start.y,
         plat.end.y,
         player.pos.y) && function () {
            var $ = function () {
               var $ = A2($HasPosition.vect_subtract,
               plat.end,
               player.pos),
               x = $.x,
               y = $.y;
               return {ctor: "_Tuple2"
                      ,_0: x
                      ,_1: y};
            }(),
            offsetx1 = $._0,
            offsety1 = $._1;
            var $ = function () {
               var $ = A2($HasPosition.vect_subtract,
               plat.start,
               player.pos),
               x = $.x,
               y = $.y;
               return {ctor: "_Tuple2"
                      ,_0: x
                      ,_1: y};
            }(),
            offsetx0 = $._0,
            offsety0 = $._1;
            var big_D = offsetx0 * offsety1 - offsetx1 * offsety0;
            var platlength = A2($HasPosition.distance,
            plat.start,
            plat.end);
            var r = configPlayer.radius;
            var $ = function () {
               var $ = player.pos,
               x = $.x,
               y = $.y;
               return {ctor: "_Tuple2"
                      ,_0: x
                      ,_1: y};
            }(),
            px = $._0,
            py = $._1;
            return _U.cmp(Math.pow(r * platlength,
            2),
            Math.pow(big_D,2)) > -1;
         }());
      });
      var touching_any = F2(function (pl,
      plats) {
         return function () {
            switch (plats.ctor)
            {case "::":
               return A2(intersects,
                 pl,
                 plats._0) ? $Maybe.Just(plats._0) : A2(touching_any,
                 pl,
                 plats._1);
               case "[]":
               return $Maybe.Nothing;}
            _U.badCase($moduleName,
            "between lines 46 and 59");
         }();
      });
      var slope = F2(function (_v3,
      _v4) {
         return function () {
            switch (_v4.ctor)
            {case "_Tuple2":
               return function () {
                    switch (_v3.ctor)
                    {case "_Tuple2":
                       return (_v4._1 - _v3._1) / (_v4._0 - _v3._0);}
                    _U.badCase($moduleName,
                    "on line 31, column 34 to 53");
                 }();}
            _U.badCase($moduleName,
            "on line 31, column 34 to 53");
         }();
      });
      var plat_slope = function (_v11) {
         return function () {
            return A2(slope,
            {ctor: "_Tuple2"
            ,_0: _v11.start.x
            ,_1: _v11.start.y},
            {ctor: "_Tuple2"
            ,_0: _v11.end.x
            ,_1: _v11.end.y});
         }();
      };
      var step = F2(function (plats,
      p) {
         return function () {
            var rad = configPlayer.radius;
            var gwidth = $Basics.toFloat($Config.game_total_width);
            var on_plat = A2(touching_any,
            p,
            plats);
            var vel = function () {
               switch (on_plat.ctor)
               {case "Just":
                  return vel_from_slope(plat_slope(on_plat._0));
                  case "Nothing":
                  return A2($HasPosition.vect_fall,
                    player_grav,
                    p.vel);}
               _U.badCase($moduleName,
               "between lines 69 and 72");
            }();
            var $ = function () {
               var $ = A2($HasPosition.vect_add,
               p.pos,
               vel),
               x = $.x,
               y = $.y;
               return {ctor: "_Tuple2"
                      ,_0: x
                      ,_1: y};
            }(),
            newx = $._0,
            newy = $._1;
            var modded_newx = _U.cmp(newx,
            gwidth + rad) > 0 ? newx - gwidth - rad : _U.cmp(newx,
            0 - rad) < 0 ? newx + gwidth + rad : newx;
            return {_: {}
                   ,pos: {_: {}
                         ,x: modded_newx
                         ,y: newy}
                   ,vel: vel};
         }();
      });
      return step;
   }();
   var std_player = function () {
      var secondary = A4($Color.rgba,
      50,
      50,
      200,
      1);
      var blue_gray = A4($Color.rgba,
      50,
      50,
      200,
      0.7);
      return $Graphics$Collage.group(_L.fromArray([A2($Graphics$Collage.filled,
                                                  blue_gray,
                                                  $Graphics$Collage.circle(configPlayer.radius))
                                                  ,A2($Graphics$Collage.outlined,
                                                  $Graphics$Collage.solid(secondary),
                                                  $Graphics$Collage.circle(configPlayer.radius))]));
   }();
   var renderPlayer = function (p) {
      return A2($HasPosition.move_f,
      p.pos,
      std_player);
   };
   var Player = F2(function (a,b) {
      return {_: {},pos: a,vel: b};
   });
   _elm.Player.values = {_op: _op
                        ,Player: Player
                        ,std_player: std_player
                        ,renderPlayer: renderPlayer
                        ,configPlayer: configPlayer
                        ,stepPlayer: stepPlayer};
   return _elm.Player.values;
};