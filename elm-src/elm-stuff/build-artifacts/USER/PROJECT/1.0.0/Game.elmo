Elm.Game = Elm.Game || {};
Elm.Game.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   if (_elm.Game.values)
   return _elm.Game.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Game",
   $ArbitraryRounding = Elm.ArbitraryRounding.make(_elm),
   $BasicUtil = Elm.BasicUtil.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Fireball = Elm.Fireball.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $HasPosition = Elm.HasPosition.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Platfm = Elm.Platfm.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Touch = Elm.Touch.make(_elm);
   var init = function () {
      var $ = {ctor: "_Tuple2"
              ,_0: $Fireball.configFireball.padded_len
              ,_1: $Fireball.configFireball.side_len},
      pad_len = $._0,
      side_len = $._1;
      var $ = {ctor: "_Tuple2"
              ,_0: $Basics.toFloat($Config.game_total_width)
              ,_1: $Basics.toFloat($Config.game_total_height)},
      gw = $._0,
      gh = $._1;
      var top_margin = $Config.game_top_margin;
      var side_margin = $Config.game_side_margin;
      return {_: {}
             ,fb_creation_seed: $Random.initialSeed(-1318314831)
             ,fireballs: _L.fromArray([])
             ,just_a_simulation: false
             ,last_touch: $Maybe.Nothing
             ,plats: _L.fromArray([])
             ,player: {_: {}
                      ,pos: {_: {},x: 200,y: 75}
                      ,vel: {_: {},x: 0,y: 0}}
             ,points: 0
             ,prev_tap_pos: {_: {},x: 0,y: 0}
             ,preview_plat: $Maybe.Nothing
             ,time_playing: 0};
   }();
   var State = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return {_: {}
                                        ,fb_creation_seed: f
                                        ,fireballs: c
                                        ,just_a_simulation: j
                                        ,last_touch: d
                                        ,plats: a
                                        ,player: b
                                        ,points: i
                                        ,prev_tap_pos: g
                                        ,preview_plat: e
                                        ,time_playing: h};
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var game_background = A2($Graphics$Collage.filled,
   A4($Color.rgba,
   175,
   175,
   255,
   0.75),
   A2($Graphics$Collage.rect,
   $Basics.toFloat($Config.game_total_width),
   $Basics.toFloat($Config.game_total_height)));
   var render = function () {
      var btn_outline_clr = A4($Color.rgba,
      150,
      150,
      150,
      0.25);
      var btn_outline_rad = 65;
      var btn_outline = A2($Graphics$Collage.filled,
      btn_outline_clr,
      $Graphics$Collage.circle(btn_outline_rad));
      var btnMargin = 20;
      var restartBtn = $Graphics$Collage.scale(2.3)($HasPosition.move_f({_: {}
                                                                        ,x: $Basics.toFloat($Config.game_total_width) - btnMargin
                                                                        ,y: btnMargin})($Graphics$Collage.toForm($Text.plainText("&#10227;"))));
      var pauseBtn = $Graphics$Collage.scale(2)($HasPosition.move_f({_: {}
                                                                    ,x: btnMargin
                                                                    ,y: btnMargin + 2})($Graphics$Collage.toForm($Text.centered($Text.bold(A2($Text.typeface,
      _L.fromArray(["arial"
                   ,"sans-serif"
                   ,"monospace"]),
      $Text.fromString("II")))))));
      return function (game) {
         return function () {
            var fireballs = A2($List.map,
            $Fireball.renderFireball,
            game.fireballs);
            var plat_preview = A2($Maybe.map,
            $Platfm.renderTouchPlatfmPreview,
            game.preview_plat);
            var plats = A2($List.map,
            $Platfm.renderPlatfm,
            game.plats);
            var forms$ = A2($Basics._op["++"],
            A2($List._op["::"],
            pauseBtn,
            A2($List._op["::"],
            restartBtn,
            plats)),
            A2($Basics._op["++"],
            _L.fromArray([$Player.renderPlayer(game.player)]),
            A2($Basics._op["++"],
            fireballs,
            _L.fromArray([A2($HasPosition.move_f,
                         {_: {},x: 10,y: -5},
                         btn_outline)
                         ,A2($HasPosition.move_f,
                         {_: {}
                         ,x: $Basics.toFloat($Config.game_total_width) - 10
                         ,y: -5},
                         btn_outline)
                         ,A2($HasPosition.move_f,
                         {_: {}
                         ,x: $Basics.toFloat($Config.game_total_width) / 2
                         ,y: 20},
                         $Graphics$Collage.toForm($Text.centered(A2($Text.color,
                         $Color.black,
                         $Text.bold(A2($Text.typeface,
                         _L.fromArray(["monospace"
                                      ,"arial"]),
                         A2($Text.height,
                         30,
                         $Text.fromString($Basics.toString($Basics.round(game.points))))))))))]))));
            var forms = function () {
               switch (plat_preview.ctor)
               {case "Just":
                  return A2($List._op["::"],
                    plat_preview._0,
                    forms$);
                  case "Nothing": return forms$;}
               _U.badCase($moduleName,
               "between lines 157 and 160");
            }();
            return A3($Graphics$Collage.collage,
            $Config.game_total_width,
            $Config.game_total_height,
            A2($List._op["::"],
            game_background,
            forms));
         }();
      };
   }();
   var toPosition = function (_v2) {
      return function () {
         return {_: {}
                ,x: $Basics.toFloat(_v2.x)
                ,y: $Basics.toFloat(_v2.y)};
      }();
   };
   var Die = function (a) {
      return {ctor: "Die",_0: a};
   };
   var Restart = function (a) {
      return {ctor: "Restart"
             ,_0: a};
   };
   var Pause = function (a) {
      return {ctor: "Pause",_0: a};
   };
   var Continue = function (a) {
      return {ctor: "Continue"
             ,_0: a};
   };
   var step = function () {
      var update_and_filter = F3(function (stepper,
      filterer,
      objs) {
         return A2($List.map,
         stepper,
         A2($List.filter,filterer,objs));
      });
      var player_hitting_fb = F2(function (player,
      fb) {
         return _U.cmp(A2($HasPosition.distance,
         player.pos,
         fb.pos),
         $Player.configPlayer.radius + $Fireball.fb_height / 2) < 0;
      });
      var plat_alive = function (_v4) {
         return function () {
            return _U.cmp(_v4.time_left,
            30) > 0;
         }();
      };
      var point_on_screen = function (_v6) {
         return function () {
            return A3($BasicUtil.in_range,
            0,
            $Basics.toFloat($Config.game_total_width),
            _v6.x) && A3($BasicUtil.in_range,
            0,
            $Basics.toFloat($Config.game_total_height),
            _v6.y);
         }();
      };
      var plat_on_screen = function (_v8) {
         return function () {
            return point_on_screen(_v8.start) || point_on_screen(_v8.end);
         }();
      };
      var plat_should_stay = A3($BasicUtil.fn_map2,
      F2(function (x,y) {
         return x && y;
      }),
      plat_on_screen,
      plat_alive);
      var fb_on_screen = function (_v10) {
         return function () {
            return point_on_screen(_v10.pos) || point_on_screen(A2($HasPosition.vect_rise,
            $Fireball.fb_height,
            _v10.pos));
         }();
      };
      var touch_to_platfm = function (_v12) {
         return function () {
            return {_: {}
                   ,end: {_: {}
                         ,x: $Basics.toFloat(_v12.x)
                         ,y: $Basics.toFloat(_v12.y)}
                   ,start: {_: {}
                           ,x: $Basics.toFloat(_v12.x0)
                           ,y: $Basics.toFloat(_v12.y0)}
                   ,time_left: 800};
         }();
      };
      var step = F2(function (_v14,
      g) {
         return function () {
            switch (_v14.ctor)
            {case "_Tuple3":
               return function () {
                    var player_on_fire = A2($BasicUtil.any,
                    player_hitting_fb(g.player),
                    g.fireballs);
                    var drawn_plat = function () {
                       switch (_v14._0.ctor)
                       {case "Just":
                          return $Maybe.Nothing;
                          case "Nothing":
                          return A2($Maybe.andThen,
                            A2($Maybe.map,
                            touch_to_platfm,
                            g.last_touch),
                            function (_v21) {
                               return function () {
                                  return _U.eq(_v21.start,
                                  _v21.end) ? $Maybe.Nothing : _U.eq(_v21.start.y,
                                  _v21.end.y) ? $Maybe.Just(_U.replace([["start"
                                                                        ,_U.replace([["y"
                                                                                     ,_v21.start.y - 1]],
                                                                        _v21.start)]],
                                  _v21)) : $Maybe.Just(_v21);
                               }();
                            });}
                       _U.badCase($moduleName,
                       "between lines 96 and 105");
                    }();
                    var new_plats = function () {
                       var updated_plats = A3(update_and_filter,
                       $Platfm.stepPlatfm(_v14._2),
                       plat_should_stay,
                       g.plats);
                       return function () {
                          switch (drawn_plat.ctor)
                          {case "Just":
                             return A2($List._op["::"],
                               drawn_plat._0,
                               updated_plats);
                             case "Nothing":
                             return updated_plats;}
                          _U.badCase($moduleName,
                          "between lines 107 and 109");
                       }();
                    }();
                    var $ = function () {
                       var spacing = $Basics.round($Fireball.configFireball.padded_len);
                       var $ = A2($Random.generate,
                       A2($Random.$int,0,75),
                       g.fb_creation_seed),
                       rand_should_create = $._0,
                       seed$ = $._1;
                       var should_create_fb = _U.eq(rand_should_create,
                       1);
                       var $ = A2($Random.generate,
                       A2($Random.$int,
                       0,
                       $Config.game_total_width / 3 | 0),
                       seed$),
                       rand_fb_pos = $._0,
                       seed$$ = $._1;
                       var new_fb_pos = $Basics.toFloat(A2($ArbitraryRounding.arb_round,
                       spacing,
                       rand_fb_pos)) * 3;
                       return {ctor: "_Tuple3"
                              ,_0: should_create_fb
                              ,_1: new_fb_pos
                              ,_2: seed$$};
                    }(),
                    should_create_fb = $._0,
                    new_fb_pos = $._1,
                    new_seed = $._2;
                    var new_fireballs = function () {
                       var updated_fbs = A3(update_and_filter,
                       $Fireball.stepFireball(_v14._2),
                       fb_on_screen,
                       g.fireballs);
                       return should_create_fb ? A2($List._op["::"],
                       $Fireball.makeFireball({_: {}
                                              ,x: new_fb_pos
                                              ,y: $Basics.toFloat($Config.game_total_height) + $Fireball.fb_height}),
                       updated_fbs) : updated_fbs;
                    }();
                    var new_game = _U.replace([["player"
                                               ,A2($Player.stepPlayer,
                                               new_plats,
                                               g.player)]
                                              ,["plats",new_plats]
                                              ,["last_touch",_v14._0]
                                              ,["fireballs",new_fireballs]
                                              ,["preview_plat"
                                               ,A2($Maybe.map,
                                               touch_to_platfm,
                                               _v14._0)]
                                              ,["fb_creation_seed",new_seed]
                                              ,["prev_tap_pos",_v14._1]
                                              ,["time_playing"
                                               ,g.time_playing + _v14._2]
                                              ,["points"
                                               ,g.points + 2 * $Time.inSeconds(_v14._2) * (1 + g.player.pos.y / $Basics.toFloat($Config.game_total_height))]],
                    g);
                    var tap_target = _U.eq(_v14._1,
                    g.prev_tap_pos) ? $Maybe.Nothing : $Maybe.Just(_v14._1);
                    var pause_clicked = function () {
                       switch (tap_target.ctor)
                       {case "Just":
                          return _U.cmp(tap_target._0.x,
                            50) < 0 && _U.cmp(tap_target._0.y,
                            50) < 0;
                          case "Nothing": return false;}
                       _U.badCase($moduleName,
                       "between lines 77 and 80");
                    }();
                    var restart_clicked = function () {
                       switch (tap_target.ctor)
                       {case "Just":
                          return _U.cmp(tap_target._0.x,
                            $Basics.toFloat($Config.game_total_width) - 50) > 0 && _U.cmp(tap_target._0.y,
                            50) < 0;
                          case "Nothing": return false;}
                       _U.badCase($moduleName,
                       "between lines 81 and 84");
                    }();
                    return _U.cmp(g.player.pos.y,
                    $Basics.toFloat($Config.game_total_height)) > 0 ? Die(new_game) : player_on_fire ? Die(new_game) : pause_clicked ? Pause(new_game) : restart_clicked ? Restart(_v14._1) : Continue(new_game);
                 }();}
            _U.badCase($moduleName,
            "between lines 75 and 130");
         }();
      });
      return step;
   }();
   _elm.Game.values = {_op: _op
                      ,game_background: game_background
                      ,init: init
                      ,render: render
                      ,step: step
                      ,State: State
                      ,Continue: Continue
                      ,Pause: Pause
                      ,Restart: Restart
                      ,Die: Die};
   return _elm.Game.values;
};