Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $App = Elm.App.make(_elm),
   $Config = Elm.Config.make(_elm),
   $HasPosition = Elm.HasPosition.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Touch = Elm.Touch.make(_elm);
   var approx_time = _P.portIn("approx_time",
   _P.incomingSignal(function (v) {
      return typeof v === "number" ? v : _U.badPort("a number",
      v);
   }));
   var taps = _P.portIn("taps",
   _P.incomingSignal(function (v) {
      return v === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v === "object" && "x" in v && "y" in v ? {_: {}
                                                                                                                                   ,x: typeof v.x === "number" ? v.x : _U.badPort("a number",
                                                                                                                                   v.x)
                                                                                                                                   ,y: typeof v.y === "number" ? v.y : _U.badPort("a number",
                                                                                                                                   v.y)} : _U.badPort("an object with fields \'x\', \'y\'",
      v));
   }));
   var cur_touch = _P.portIn("cur_touch",
   _P.incomingSignal(function (v) {
      return v === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v === "object" && "x" in v && "y" in v && "id" in v && "x0" in v && "y0" in v && "t0" in v ? {_: {}
                                                                                                                                                                                       ,x: typeof v.x === "number" ? v.x : _U.badPort("a number",
                                                                                                                                                                                       v.x)
                                                                                                                                                                                       ,y: typeof v.y === "number" ? v.y : _U.badPort("a number",
                                                                                                                                                                                       v.y)
                                                                                                                                                                                       ,id: typeof v.id === "number" ? v.id : _U.badPort("a number",
                                                                                                                                                                                       v.id)
                                                                                                                                                                                       ,x0: typeof v.x0 === "number" ? v.x0 : _U.badPort("a number",
                                                                                                                                                                                       v.x0)
                                                                                                                                                                                       ,y0: typeof v.y0 === "number" ? v.y0 : _U.badPort("a number",
                                                                                                                                                                                       v.y0)
                                                                                                                                                                                       ,t0: typeof v.t0 === "number" ? v.t0 : _U.badPort("a number",
                                                                                                                                                                                       v.t0)} : _U.badPort("an object with fields \'x\', \'y\', \'id\', \'x0\', \'y0\', \'t0\'",
      v));
   }));
   var touches = _P.portOut("touches",
   _P.outgoingSignal(function (v) {
      return Elm.Native.List.make(_elm).toArray(v).map(function (v) {
         return {x: v.x
                ,y: v.y
                ,id: v.id
                ,x0: v.x0
                ,y0: v.y0
                ,t0: v.t0};
      });
   }),
   $Touch.touches);
   var delta = $Time.fps($Config.framerate);
   var inputs = A4($Signal.map3,
   F3(function (v0,v1,v2) {
      return {ctor: "_Tuple3"
             ,_0: v0
             ,_1: v1
             ,_2: v2};
   }),
   cur_touch,
   A2($Signal.map,
   $Maybe.withDefault({_: {}
                      ,x: 0
                      ,y: 0}),
   taps),
   delta);
   var main = A2($Signal.map,
   $App.render,
   A3($Signal.foldp,
   $App.step,
   $App.init,
   A2($Signal.sampleOn,
   delta,
   A3($Signal.map2,
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   approx_time,
   inputs))));
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,delta: delta
                      ,inputs: inputs};
   return _elm.Main.values;
};