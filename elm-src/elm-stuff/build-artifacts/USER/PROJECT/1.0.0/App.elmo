Elm.App = Elm.App || {};
Elm.App.make = function (_elm) {
   "use strict";
   _elm.App = _elm.App || {};
   if (_elm.App.values)
   return _elm.App.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "App",
   $DeadScreen = Elm.DeadScreen.make(_elm),
   $Game = Elm.Game.make(_elm),
   $MainMenu = Elm.MainMenu.make(_elm),
   $Paused = Elm.Paused.make(_elm);
   var render = function (st) {
      return function () {
         switch (st.ctor)
         {case "OnDead":
            return $DeadScreen.render(st._0);
            case "OnGame":
            return $Game.render(st._0);
            case "OnMainMenu":
            return $MainMenu.render(st._0);
            case "OnPaused":
            return $Paused.render(st._0);}
         _U.badCase($moduleName,
         "between lines 41 and 45");
      }();
   };
   var sndOfThree = function (_v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple3": return _v5._1;}
         _U.badCase($moduleName,
         "on line 17, column 22 to 23");
      }();
   };
   var OnMainMenu = function (a) {
      return {ctor: "OnMainMenu"
             ,_0: a};
   };
   var init = OnMainMenu($MainMenu.init);
   var OnPaused = function (a) {
      return {ctor: "OnPaused"
             ,_0: a};
   };
   var OnDead = function (a) {
      return {ctor: "OnDead"
             ,_0: a};
   };
   var OnGame = function (a) {
      return {ctor: "OnGame"
             ,_0: a};
   };
   var step = F2(function (inputs,
   st) {
      return function () {
         switch (st.ctor)
         {case "OnDead":
            return function () {
                 var _v15 = A2($DeadScreen.step,
                 sndOfThree(inputs),
                 st._0);
                 switch (_v15.ctor)
                 {case "Continue":
                    return OnDead(_v15._0);
                    case "Replay":
                    return function () {
                         var i = $Game.init;
                         return OnGame(_U.replace([["prev_tap_pos"
                                                   ,_v15._0]],
                         i));
                      }();}
                 _U.badCase($moduleName,
                 "between lines 32 and 35");
              }();
            case "OnGame":
            return function () {
                 var _v18 = A2($Game.step,
                 inputs,
                 st._0);
                 switch (_v18.ctor)
                 {case "Continue":
                    return OnGame(_v18._0);
                    case "Die":
                    return OnDead(_v18._0);
                    case "Pause":
                    return OnPaused(_v18._0);
                    case "Restart":
                    return function () {
                         var i = $Game.init;
                         return OnGame(_U.replace([["prev_tap_pos"
                                                   ,_v18._0]],
                         i));
                      }();}
                 _U.badCase($moduleName,
                 "between lines 22 and 27");
              }();
            case "OnMainMenu":
            return function () {
                 var _v23 = A2($MainMenu.step,
                 sndOfThree(inputs),
                 st._0);
                 switch (_v23.ctor)
                 {case "Continue":
                    return OnMainMenu(_v23._0);
                    case "PlayGame":
                    return OnGame($Game.init);}
                 _U.badCase($moduleName,
                 "between lines 36 and 38");
              }();
            case "OnPaused":
            return function () {
                 var _v25 = A2($Paused.step,
                 sndOfThree(inputs),
                 st._0);
                 switch (_v25.ctor)
                 {case "Continue":
                    return OnPaused(_v25._0);
                    case "Play":
                    return OnGame(_v25._0);}
                 _U.badCase($moduleName,
                 "between lines 28 and 31");
              }();}
         _U.badCase($moduleName,
         "between lines 20 and 38");
      }();
   });
   _elm.App.values = {_op: _op
                     ,init: init
                     ,step: step
                     ,render: render};
   return _elm.App.values;
};