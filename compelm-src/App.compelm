-- (c) Wilson Berkow

module App (App/State, App/init, App/step, App/render, App/Input, App/inputs) where

import Text (plainText)

import Config (game_total_height)
import Game (..)
import Paused
import Paused (Paused/step, Paused/render)
import DeadScreen
import DeadScreen (DeadScreen/step, DeadScreen/render)
import MainMenu
import MainMenu (MainMenu/State, MainMenu/init, MainMenu/step, MainMenu/render)

type St = OnGame Game/State | OnDead Game/State | OnPaused Game/State | OnMainMenu MainMenu/State

component App where
    State: St
    Input: Game/Input
    inputs: Game/inputs
    @sndOfThree: \(_,x,_) -> x
    step: \inputs st ->
      case st of
        (OnGame g) ->
          case Game/step inputs g of
            Die g -> OnDead g
            Restart pos -> OnGame { Game/init | prev_tap_pos <- pos }
            Pause st -> OnPaused st
            Continue new_game -> OnGame new_game
        (OnPaused g) ->
          case Paused/step (@sndOfThree inputs) g of
            Paused.Continue g -> OnPaused g
            Paused.Play g -> OnGame g
        (OnDead g) ->
          case DeadScreen/step (@sndOfThree inputs) g of
            DeadScreen.Continue g -> OnDead g
            DeadScreen.Replay pos -> OnGame { Game/init | prev_tap_pos <- pos }
        (OnMainMenu p) ->
          case MainMenu/step (@sndOfThree inputs) p of
            MainMenu.Continue pos -> OnMainMenu pos
            MainMenu.PlayGame -> OnGame Game/init
    render: \st ->
        case st of
            (OnGame g) -> Game/render g
            (OnPaused g) -> Paused/render g
            (OnDead g) -> DeadScreen/render g
            (OnMainMenu p) -> MainMenu/render p
    init: OnMainMenu MainMenu/init
